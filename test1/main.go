package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"sync"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
)

// Task –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ ToDo —Å–ø–∏—Å–∫–µ
type Task struct {
	ID          int       `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Completed   bool      `json:"completed"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// TaskService —É–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∞–º–∏ –≤ –ø–∞–º—è—Ç–∏
type TaskService struct {
	tasks  map[int]*Task
	nextID int
	mutex  sync.RWMutex
}

// NewTaskService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –∑–∞–¥–∞—á
func NewTaskService() *TaskService {
	return &TaskService{
		tasks:  make(map[int]*Task),
		nextID: 1,
	}
}

// CreateTask —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
func (ts *TaskService) CreateTask(title, description string) *Task {
	ts.mutex.Lock()
	defer ts.mutex.Unlock()

	task := &Task{
		ID:          ts.nextID,
		Title:       title,
		Description: description,
		Completed:   false,
		CreatedAt:   time.Now(),
		UpdatedAt:   time.Now(),
	}

	ts.tasks[ts.nextID] = task
	ts.nextID++

	return task
}

// GetTask –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID
func (ts *TaskService) GetTask(id int) (*Task, error) {
	ts.mutex.RLock()
	defer ts.mutex.RUnlock()

	task, exists := ts.tasks[id]
	if !exists {
		return nil, fmt.Errorf("–∑–∞–¥–∞—á–∞ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", id)
	}

	return task, nil
}

// GetAllTasks –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏
func (ts *TaskService) GetAllTasks() []*Task {
	ts.mutex.RLock()
	defer ts.mutex.RUnlock()

	tasks := make([]*Task, 0, len(ts.tasks))
	for _, task := range ts.tasks {
		tasks = append(tasks, task)
	}

	return tasks
}

// UpdateTask –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
func (ts *TaskService) UpdateTask(id int, title, description string, completed bool) (*Task, error) {
	ts.mutex.Lock()
	defer ts.mutex.Unlock()

	task, exists := ts.tasks[id]
	if !exists {
		return nil, fmt.Errorf("–∑–∞–¥–∞—á–∞ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", id)
	}

	task.Title = title
	task.Description = description
	task.Completed = completed
	task.UpdatedAt = time.Now()

	return task, nil
}

// DeleteTask —É–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID
func (ts *TaskService) DeleteTask(id int) error {
	ts.mutex.Lock()
	defer ts.mutex.Unlock()

	_, exists := ts.tasks[id]
	if !exists {
		return fmt.Errorf("–∑–∞–¥–∞—á–∞ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", id)
	}

	delete(ts.tasks, id)
	return nil
}

// CreateTaskRequest –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
type CreateTaskRequest struct {
	Title       string `json:"title"`
	Description string `json:"description"`
}

// UpdateTaskRequest –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
type UpdateTaskRequest struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Completed   bool   `json:"completed"`
}

// ErrorResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
type ErrorResponse struct {
	Error string `json:"error"`
}

// TaskHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞–¥–∞—á
type TaskHandler struct {
	service *TaskService
}

// NewTaskHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á
func NewTaskHandler(service *TaskService) *TaskHandler {
	return &TaskHandler{service: service}
}

// CreateTask –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST /tasks
func (th *TaskHandler) CreateTask(w http.ResponseWriter, r *http.Request) {
	var req CreateTaskRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π JSON", http.StatusBadRequest)
		return
	}

	if req.Title == "" {
		http.Error(w, "–ü–æ–ª–µ 'title' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ", http.StatusBadRequest)
		return
	}

	task := th.service.CreateTask(req.Title, req.Description)
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(task)
}

// GetTasks –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET /tasks
func (th *TaskHandler) GetTasks(w http.ResponseWriter, r *http.Request) {
	tasks := th.service.GetAllTasks()
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(tasks)
}

// GetTask –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET /tasks/{id}
func (th *TaskHandler) GetTask(w http.ResponseWriter, r *http.Request) {
	idStr := chi.URLParam(r, "id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏", http.StatusBadRequest)
		return
	}

	task, err := th.service.GetTask(id)
	if err != nil {
		http.Error(w, err.Error(), http.StatusNotFound)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(task)
}

// UpdateTask –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç PUT /tasks/{id}
func (th *TaskHandler) UpdateTask(w http.ResponseWriter, r *http.Request) {
	idStr := chi.URLParam(r, "id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏", http.StatusBadRequest)
		return
	}

	var req UpdateTaskRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π JSON", http.StatusBadRequest)
		return
	}

	if req.Title == "" {
		http.Error(w, "–ü–æ–ª–µ 'title' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ", http.StatusBadRequest)
		return
	}

	task, err := th.service.UpdateTask(id, req.Title, req.Description, req.Completed)
	if err != nil {
		http.Error(w, err.Error(), http.StatusNotFound)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(task)
}

// DeleteTask –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç DELETE /tasks/{id}
func (th *TaskHandler) DeleteTask(w http.ResponseWriter, r *http.Request) {
	idStr := chi.URLParam(r, "id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏", http.StatusBadRequest)
		return
	}

	err = th.service.DeleteTask(id)
	if err != nil {
		http.Error(w, err.Error(), http.StatusNotFound)
		return
	}

	w.WriteHeader(http.StatusNoContent)
}

func main() {
	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	taskService := NewTaskService()
	taskHandler := NewTaskHandler(taskService)

	// –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
	r := chi.NewRouter()

	// –î–æ–±–∞–≤–ª—è–µ–º middleware
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(middleware.RequestID)
	r.Use(middleware.RealIP)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å Postman
	r.Use(func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			w.Header().Set("Access-Control-Allow-Origin", "*")
			w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
			w.Header().Set("Access-Control-Allow-Headers", "Content-Type")

			if r.Method == "OPTIONS" {
				w.WriteHeader(http.StatusOK)
				return
			}

			next.ServeHTTP(w, r)
		})
	})

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
	r.Route("/tasks", func(r chi.Router) {
		r.Post("/", taskHandler.CreateTask)       // POST /tasks
		r.Get("/", taskHandler.GetTasks)          // GET /tasks
		r.Get("/{id}", taskHandler.GetTask)       // GET /tasks/{id}
		r.Put("/{id}", taskHandler.UpdateTask)    // PUT /tasks/{id}
		r.Delete("/{id}", taskHandler.DeleteTask) // DELETE /tasks/{id}
	})

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	r.Get("/", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{
			"message":   "ToDo API —Ä–∞–±–æ—Ç–∞–µ—Ç!",
			"version":   "1.0.0",
			"endpoints": "POST /tasks, GET /tasks, GET /tasks/{id}, PUT /tasks/{id}, DELETE /tasks/{id}",
		})
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	port := ":8080"
	fmt.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost%s\n", port)
	fmt.Println("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
	fmt.Println("  POST   /tasks     - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
	fmt.Println("  GET    /tasks     - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")
	fmt.Println("  GET    /tasks/{id} - –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID")
	fmt.Println("  PUT    /tasks/{id} - –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
	fmt.Println("  DELETE /tasks/{id} - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
	fmt.Println("  GET    /           - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API")

	log.Fatal(http.ListenAndServe(port, r))
}
